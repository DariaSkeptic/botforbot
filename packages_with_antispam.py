import sqlite3
from datetime import datetime, timedelta
from aiogram import Router, types, F
from aiogram.filters import Command
from aiogram.utils.keyboard import InlineKeyboardBuilder
from config import ADMIN_CHAT_ID, SUPPORT_LINK
import logging

router = Router()

WINDOW = timedelta(minutes=30)
MAX_SUBMISSIONS = 2

def init_db():
    conn = sqlite3.connect("antispam.db")
    conn.execute("CREATE TABLE IF NOT EXISTS submissions (user_id INTEGER, timestamp TEXT)")
    conn.commit()
    conn.close()
    logging.info("–ë–∞–∑–∞ –∞–Ω—Ç–∏—Å–ø–∞–º–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")

def _prune(user_id: int):
    conn = sqlite3.connect("antispam.db")
    conn.execute(
        "DELETE FROM submissions WHERE user_id = ? AND timestamp <= ?",
        (user_id, (datetime.utcnow() - WINDOW).isoformat())
    )
    conn.commit()
    conn.close()

def can_submit(user_id: int) -> bool:
    _prune(user_id)
    conn = sqlite3.connect("antispam.db")
    cursor = conn.execute(
        "SELECT COUNT(*) FROM submissions WHERE user_id = ?",
        (user_id,)
    )
    count = cursor.fetchone()[0]
    conn.close()
    return count < MAX_SUBMISSIONS

def mark_submit(user_id: int):
    _prune(user_id)
    conn = sqlite3.connect("antispam.db")
    conn.execute(
        "INSERT INTO submissions (user_id, timestamp) VALUES (?, ?)",
        (user_id, datetime.utcnow().isoformat())
    )
    conn.commit()
    conn.close()
    logging.info(f"–ó–∞—è–≤–∫–∞ –æ—Ç user_id={user_id} –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞")

def minutes_left(user_id: int) -> int:
    _prune(user_id)
    conn = sqlite3.connect("antispam.db")
    cursor = conn.execute(
        "SELECT timestamp FROM submissions WHERE user_id = ? ORDER BY timestamp",
        (user_id,)
    )
    timestamps = cursor.fetchall()
    conn.close()
    if len(timestamps) < MAX_SUBMISSIONS:
        return 0
    release_at = datetime.fromisoformat(timestamps[0][0]) + WINDOW
    delta = (release_at - datetime.utcnow()).total_seconds()
    if delta <= 0:
        return 0
    mins = int(delta // 60) + (1 if delta % 60 else 0)
    return mins

COMPARE_TEXT = (
    "<b>üìä –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø–∞–∫–µ—Ç–æ–≤</b>\n\n"
    "<b>–ú–∏–Ω–∏-–±–æ—Ç ‚Äî 5 000 ‚ÇΩ</b>\n"
    "‚Ä¢ 1‚Äì2 —Ñ—É–Ω–∫—Ü–∏–∏ –±–µ–∑ —Å–ª–æ–∂–Ω–æ–π –ª–æ–≥–∏–∫–∏\n"
    "‚Ä¢ –ü—Ä–æ—Å—Ç–æ–µ –º–µ–Ω—é, –≤—ã–¥–∞—á–∞ —Ñ–∞–π–ª–∞ –∏–ª–∏ —Å–±–æ—Ä –∑–∞—è–≤–∫–∏\n"
    "‚Ä¢ –ë–µ–∑ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π –∏ –æ–ø–ª–∞—Ç\n\n"
    "<b>–ë–æ—Ç —Å –ª–æ–≥–∏–∫–æ–π –∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è–º–∏ ‚Äî 15 000 ‚ÇΩ</b>\n"
    "‚Ä¢ –í–µ—Ç–≤–ª–µ–Ω–∏—è –∏ —É—Å–ª–æ–≤–∏—è –≤ —Å—Ü–µ–Ω–∞—Ä–∏—è—Ö\n"
    "‚Ä¢ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏: Google Sheets, CRM, Email, API\n"
    "‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Ä–∞—Å—á—ë—Ç –ø–æ –¥–∞—Ç–µ —Ä–æ–∂–¥–µ–Ω–∏—è)\n\n"
    "<b>–ë–æ—Ç –ø–æ–¥ –∫–ª—é—á ‚Äî 30 000 ‚ÇΩ</b>\n"
    "‚Ä¢ –í—Å—ë –∏–∑ –ø–∞–∫–µ—Ç–∞ ¬´–õ–æ–≥–∏–∫–∞¬ª + –±–∞–∑–æ–≤–æ–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –≤ —Å—Ç–∏–ª–µ Telegram\n"
    "‚Ä¢ –†–∞–∑–º–µ—â–µ–Ω–∏–µ –Ω–∞ —Ö–æ—Å—Ç–∏–Ω–≥–µ –∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞\n"
    "‚Ä¢ –ö–æ–Ω—Ç–µ–Ω—Ç –∏ —Ç–µ–∫—Å—Ç—ã ‚Äî –ø–æ –¥–æ–≥–æ–≤–æ—Ä—ë–Ω–Ω–æ—Å—Ç–∏ (–º–æ–∂–Ω–æ –≥–æ—Ç–æ–≤—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –∫–ª–∏–µ–Ω—Ç–∞)\n"
    "‚Ä¢ –ì–æ—Ç–æ–≤—ã–π –∫ —Ä–∞–±–æ—Ç–µ –±–æ—Ç –±–µ–∑ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ —Ä–∞–∑–±–∏—Ä–∞—Ç—å—Å—è –≤ –∫–æ–¥–µ"
)

TITLES = {
    "mini": "–ú–∏–Ω–∏-–±–æ—Ç",
    "logic": "–ë–æ—Ç —Å –ª–æ–≥–∏–∫–æ–π –∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è–º–∏",
    "turnkey": "–ë–æ—Ç –ø–æ–¥ –∫–ª—é—á",
}

_compare_kb = None

def compare_keyboard():
    global _compare_kb
    if _compare_kb is None:
        kb = InlineKeyboardBuilder()
        kb.button(text="–í—ã–±—Ä–∞—Ç—å –ú–∏–Ω–∏-–±–æ—Ç", callback_data="pack:choose:mini")
        kb.button(text="–í—ã–±—Ä–∞—Ç—å –õ–æ–≥–∏–∫—É", callback_data="pack:choose:logic")
        kb.button(text="–í—ã–±—Ä–∞—Ç—å –ü–æ–¥ –∫–ª—é—á", callback_data="pack:choose:turnkey")
        kb.button(text="üîÑ –°–±—Ä–æ—Å–∏—Ç—å –≤—ã–±–æ—Ä", callback_data="pack:reset")
        if SUPPORT_LINK:
            kb.button(text="‚úâÔ∏è –ù–∞–ø–∏—Å–∞—Ç—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É", url=SUPPORT_LINK)
        kb.adjust(1)
        _compare_kb = kb.as_markup()
    return _compare_kb

@router.message(Command("packages"))
async def show_packages(message: types.Message):
    await message.answer(
        COMPARE_TEXT,
        reply_markup=compare_keyboard(),
        disable_web_page_preview=True
    )
    logging.info(f"–ü–æ–∫–∞–∑–∞–Ω—ã –ø–∞–∫–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {message.from_user.id}")

@router.message(F.text.casefold() == "–ø–∞–∫–µ—Ç—ã")
async def show_packages_by_text(message: types.Message):
    await show_packages(message)

@router.callback_query(F.data == "pack:reset")
async def reset_choice(call: types.CallbackQuery):
    await call.message.edit_text(
        COMPARE_TEXT,
        reply_markup=compare_keyboard(),
        disable_web_page_preview=True
    )
    await call.answer("–í—ã–±–æ—Ä —Å–±—Ä–æ—à–µ–Ω")
    logging.info(f"–°–±—Ä–æ—Å –≤—ã–±–æ—Ä–∞ –¥–ª—è {call.from_user.id}")

@router.callback_query(F.data.startswith("pack:choose:"))
async def choose_package(call: types.CallbackQuery):
    try:
        key = call.data.split(":")[-1]
        title = TITLES.get(key, key)
        user = call.from_user
        uid = user.id

        if not can_submit(uid):
            wait = minutes_left(uid)
            msg = "–õ–∏–º–∏—Ç –∑–∞—è–≤–æ–∫ –∏—Å—á–µ—Ä–ø–∞–Ω."
            if wait:
                msg += f" –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ —á–µ—Ä–µ–∑ {wait} –º–∏–Ω."
            await call.answer(msg, show_alert=True)
            logging.warning(f"–ê–Ω—Ç–∏—Å–ø–∞–º: –ª–∏–º–∏—Ç –¥–ª—è {uid}")
            return

        admin_text = (
            f"üÜï <b>–ó–∞—è–≤–∫–∞ –Ω–∞ –ø–∞–∫–µ—Ç</b>\n"
            f"–ü–∞–∫–µ—Ç: <b>{title}</b>\n"
            f"–û—Ç: @{user.username or '‚Äî'} | {user.full_name} | id={uid}"
        )
        await call.bot.send_message(ADMIN_CHAT_ID, admin_text)
        mark_submit(uid)

        confirm = (
            f"–ü—Ä–∏–Ω—è—Ç–æ. –ü–∞–∫–µ—Ç <b>{title}</b> –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω.\n"
            "–ï—Å–ª–∏ –ø—Ä–æ–º–∞—Ö–Ω—É–ª–∞—Å—å ‚Äî –∂–º–∏ ¬´üîÑ –°–±—Ä–æ—Å–∏—Ç—å –≤—ã–±–æ—Ä¬ª –∏ –æ—Ç–ø—Ä–∞–≤—å –Ω–æ–≤—É—é –∑–∞—è–≤–∫—É."
        )
        await call.message.edit_text(confirm, reply_markup=compare_keyboard())
        await call.answer("–ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞")
        logging.info(f"–ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –æ—Ç {uid}: {title}")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ choose_package: {e}")
        await call.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ", show_alert=True)